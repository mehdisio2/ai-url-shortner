import { getId, storeShortUrl } from '../services/services.js';  // Use ES Modules import
import * as db from '../config/db.js'
import * as bcrypt from 'bcrypt'
import jwt from 'jsonwebtoken'
import dotenv from 'dotenv'
import { generateSmrtUrl } from '../utils/generatedUrl.js';


dotenv.config({ path: '/home/mahdi/Documents/Projects/ai-url-shortner/backend/.env' });

// Controller to shorten a URL
export const urlShortner = async (req, res) => {  // Make the function async
  try {
    const { url } = req.body;
    const response = await getId(url);  // Await the result of the async function
    const id = response.rows[0].id;
    const short_code = Buffer.from(String(id)).toString('base64'); // hashing the id using base64
    const shortCodeStored = await storeShortUrl(short_code, id);
    
    let shortUrl;
    if(shortCodeStored){
      shortUrl = 'http://localhost:5000/' + short_code;
    }else {
      console.error('unable to store the short_code');
    }
    
    res.status(201).json({shortUrl: shortUrl});  // Return the shortened URL as a response
  } catch (error) {
    console.error('Error in urlShortner controller:', error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
}

// Controller to redirect to the original URL
export const urlRedirectToOriginal = async (req, res) => {
  try {
    const shortCode = req.params.id;
    const originalUrl = await db.query('SELECT original_url FROM urls WHERE short_code = ($1)', [shortCode]);
    res.redirect(originalUrl.rows[0].original_url);
  } catch (error) {
    res.status(500).send('Internal Server Error');
    console.error("unable to redirect to the original url")
  }


}

// Controller to delete a shortened URL
export const deleteShortenUrl = async (req, res) => {
 try {
  const short_code = req.params.id;
  const urldeleted =  db.query('DELETE FROM urls WHERE short_code = ($1)', [short_code])
  if(urldeleted) res.status(200).send('URL deleted');
} catch (error) {
  console.error('unable to delete URL')
  res.status(500).json({error : 'Internal server error'})
 } 
}

// Controller to get urls generated by a specific user
export const getUrls = async (req, res) => {
  try {
    const {rows} = await db.query('SELECT short_code, original_url FROM urls')
    console.log(rows);
    res.status(200).json({links : rows})
  } catch (error) {
    res.status(500).json({error: 'Internal server error'})
  }


}


export const addNewUser = async (req, res) => {
  const saltRounds = 10;
  try {
    const {username, password} = req.body;
    const hash = await bcrypt.hash(password, saltRounds);
    const passwordStored = db.query('INSERT INTO users (username, password) VALUES ($1, $2)', [username, hash])
    if(passwordStored) res.status(200).send('user added succesfully')
  } catch (error) {
    console.error('unable to add user', error)
    res.status(500).send('unable to add user')
  }


}

export const checkUser = async (req, res) => {
  try {
    const {username, password} = req.body;
    const  {rows} = await db.query('SELECT id, password FROM users WHERE username = ($1)', [username])
    const hash = rows[0].password;
    const isPassword = await bcrypt.compare(password, hash);
    
    if(isPassword == true){
      const payload = {id: rows[0].id, username: username}; // rows[0].id : is the id returned from the database
      const token = jwt.sign(payload, process.env.JWT_KEY, {expiresIn: '1h'});
      res.cookie('token', token, {
        httpOnly: true,
      })
      res.status(200).send('login succesfully')
    }else{
      console.log('unatrheh')
      res.status(401).send('incorrect password or username')
    }
    
  } catch (error) {
    console.error(error)
    res.status(500).send('internal server error')
  }

}
export const smartUrlShortner = async (req, res) => {
  try {
    const {url, prompt} = req.body;
    const generatedAliases = await generateSmrtUrl(url, prompt);
    const {rows} = await db.query(`SELECT short_code FROM urls where short_code = ANY($1)`, [generatedAliases]);
    const existingAliases = rows.map(row => row.name);
    const uniqueAliases = generatedAliases.filter( item => !existingAliases.includes(item));
    
    res.status(200).json({aliases: uniqueAliases})    
  } catch (error) {
    console.log(error);
    res.status(500).json('Enternal server error');
  }


}